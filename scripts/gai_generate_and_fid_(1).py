# -*- coding: utf-8 -*-
"""gai-generate-and-fid (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H0R37jJYFdUjA-MFHRIgJyCJorE5sCoM
"""

!pip install -q diffusers transformers accelerate torchvision safetensors

import torch
from diffusers import DDPMPipeline
from torchvision.utils import save_image
import os
from tqdm import tqdm
from accelerate import Accelerator
import gc

# 設定資料夾
model_dir = "/kaggle/input/ddpm-pttbeauty-64-v11-linear-80/ddpm-PTTbeauty-64-v11-linear-80/best_model"  # 模型儲存資料夾
output_dir = "/kaggle/working/generated_images_v11-linear-80-300steps"
os.makedirs(output_dir, exist_ok=True)

# 設定參數
num_images = 10000
batch_size = 32
image_size = 64
num_inference_steps = 300

# 初始化 accelerator
accelerator = Accelerator()
device = accelerator.device
print(f"Using device: {device}")
print(f"Number of GPUs available: {torch.cuda.device_count()}")

# 初始化 Accelerate
accelerator = Accelerator()
device = accelerator.device

# 載入 pipeline
pipeline = DDPMPipeline.from_pretrained(model_dir, torch_dtype=torch.float16)
pipeline.unet = accelerator.prepare(pipeline.unet)  # 多 GPU 支援

# 計算批次數與索引初始化
n_batches = (num_images + batch_size - 1) // batch_size
global_index = 0

# 開始生成
with accelerator.autocast():
    for i in tqdm(range(n_batches), desc="Generating images"):

        print(f"開始進行第 {i} 個 Epoch")

        # 生成圖片
        # images = pipeline(num_inference_steps=num_inference_steps, batch_size=batch_size).images
        images = pipeline(
            num_inference_steps=num_inference_steps,
            batch_size=batch_size,
        ).images

        # 儲存圖片
        for j, img in enumerate(images):
            index = global_index + j
            if index >= num_images:
                break
            img.save(os.path.join(output_dir, f"{index:05d}.png"))

        global_index += len(images)

        print(f"已經進行完第 {i} 個 Epoch")

        # 手動清除記憶體
        del images  # 釋放圖片 tensor
        torch.cuda.empty_cache()  # 清除 GPU cache
        gc.collect()  # Python 層垃圾回收

# Commented out IPython magic to ensure Python compatibility.
# %cd /kaggle/working/generated_images_v11-linear-80-300steps
!zip -rq ../submission_v11-linear-80-300steps.zip .
# %cd ..

!python /kaggle/input/fid-test/FID_eval_2.py --img_dir /kaggle/working/generated_images_v11-linear-80-300steps

